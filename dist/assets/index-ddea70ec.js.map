{"version":3,"mappings":"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","names":["github","Layout","jsxs","styles","jsx","Link","Outlet","BACKEND_URI","getHeaders","headers","chatApi","request","body","getCitationFilePath","citation","RetrievalMode","GPT4VInput","VectorFieldOptions","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","x","path","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","question","setQuestion","useState","useEffect","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","useMsal","disableRequiredAccessControl","sendQuestionDisabled","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","ExampleList","onExampleClicked","useGPT4V","UserChatMessage","message","ClearChatButton","className","Delete24Regular","vectorFields","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","retrievalMode","setRetrievalMode","vectorFieldOption","setVectorFieldOption","onVectorFieldsChange","option","list","ChoiceGroup","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFieldList","setVectorFieldList","setUseGPT4V","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","activeCitation","setActiveCitation","selectedAnswer","setSelectedAnswer","answers","setAnswers","showGPT4VOptions","setShowGPT4VOptions","makeApiRequest","response","contentType","bodyText","parsedResponse","e","clearChat","onPromptTemplateChange","onRetrieveCountChange","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onShouldStreamChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","example","onShowCitation","index","c","q","Fragment","SparkleFilled","Panel","DefaultButton","SpinButton","Checkbox","options","layout","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../src/assets/github.svg","../../src/pages/layout/Layout.tsx","../../src/api/BACKEND_URI.ts","../../src/api/api.ts","../../src/api/models.ts","../../src/components/Answer/AnswerParser.tsx","../../src/components/Answer/AnswerIcon.tsx","../../src/components/Answer/Answer.tsx","../../src/components/Answer/AnswerLoading.tsx","../../src/components/Answer/AnswerError.tsx","../../src/components/QuestionInput/QuestionInput.tsx","../../src/components/Example/Example.tsx","../../src/components/Example/ExampleList.tsx","../../src/components/UserChatMessage/UserChatMessage.tsx","../../src/components/ClearChatButton/ClearChatButton.tsx","../../src/components/VectorSettings/VectorSettings.tsx","../../src/pages/chat/Chat.tsx","../../src/index.tsx"],"sourcesContent":["export default \"__VITE_ASSET__4e6ad5ae__\"","import { Outlet, NavLink, Link } from \"react-router-dom\";\n\nimport github from \"../../assets/github.svg\";\n\nimport styles from \"./Layout.module.css\";\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>Cosmos DB MongoDB vCore + Azure OpenAI</h3>\n                    </Link>\n                    <nav>\n                        <ul className={styles.headerNavList}>\n                            \n                            <li className={styles.headerNavLeftMargin}>\n                                <a href=\"https://github.com/cosmosdb\" target={\"_blank\"} title=\"Github repository link\">\n                                    <img\n                                        src={github}\n                                        alt=\"Github logo\"\n                                        aria-label=\"Link to github repository\"\n                                        width=\"20px\"\n                                        height=\"20px\"\n                                        className={styles.githubLogo}\n                                    />\n                                </a>\n                            </li>\n                        </ul>\n                    </nav>\n                    <h4 className={styles.headerRightText}>CosmicWorks</h4>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","export const BACKEND_URI = '';\n","import { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config } from \"./models\";\nimport { BACKEND_URI } from \"./BACKEND_URI\";\n\nfunction getHeaders(): Record<string, string> {\n    var headers: Record<string, string> = {\n        \"Content-Type\": \"application/json\"\n    };\n    return headers;\n}\n\nexport async function chatApi(request: ChatAppRequest): Promise<Response> {\n    const body = JSON.stringify(request);\n    return await fetch(`${BACKEND_URI}/ai`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: getHeaders(),\n        body: body\n    });\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport const enum GPT4VInput {\n    TextAndImages = \"textAndImages\",\n    Images = \"images\",\n    Texts = \"texts\"\n}\n\nexport const enum VectorFieldOptions {\n    Embedding = \"embedding\",\n    ImageEmbedding = \"imageEmbedding\",\n    Both = \"both\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    exclude_category?: string;\n    top?: number;\n    temperature?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n    use_gpt4v?: boolean;\n    gpt4v_input?: GPT4VInput;\n    vector_fields: VectorFieldOptions[];\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: string };\n};\n\nexport type ResponseContext = {\n    data_points: string[];\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport type ResponseChoice = {\n    index: number;\n    message: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppResponseOrError = {\n    choices?: ResponseChoice[];\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    message: string;\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    session_id: string;\n    prompt: string;\n};\n\nexport type Config = {\n    showGPT4VOptions: boolean;\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    /* This parses out the citations, but for the dev guide we don't need this functionality currently.\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n    */\n\n    const fragments: string[] = [parsedAnswer];\n\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    //const followupQuestions = answer.choices[0].context.followup_questions;\n    const messageContent = answer.message; //answer.choices[0].message.content;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml).replace(/```json/g, \"<pre>\").replace(/```/g, \"</pre>\");\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        {/* <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Show thought process\"\n                            ariaLabel=\"Show thought process\"\n                            onClick={() => onThoughtProcessClicked()}\n                            // disabled={!answer.choices[0].context.thoughts?.length}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title=\"Show supporting content\"\n                            ariaLabel=\"Show supporting content\"\n                            onClick={() => onSupportingContentClicked()}\n                            // disabled={!answer.choices[0].context.data_points}\n                        /> */}\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>Citations:</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const path = getCitationFilePath(x);\n                            return (\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {/* {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )} */}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Generating answer\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p><strong>An Error Occurred:</strong></p>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip, Field, Textarea } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const { instance } = useMsal();\n    const disableRequiredAccessControl = false; //requireAccessControl && !isLoggedIn(instance);\n    const sendQuestionDisabled = disabled || !question.trim() || disableRequiredAccessControl;\n\n    if (disableRequiredAccessControl) {\n        placeholder = \"Please login to continue...\";\n    }\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                disabled={disableRequiredAccessControl}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nconst DEFAULT_EXAMPLES: string[] = [\n    \"What was the price of the product with sku `FR-R92B-58`?\",\n    \"What is the SKU of HL Road Frame - Black?\",\n    \"What is HL Road Frame?\"\n];\n\nconst GPT4V_EXAMPLES: string[] = [\n    \"Compare the impact of interest rates and GDP in financial markets.\",\n    \"What is the expected trend for the S&P 500 index over the next five years? Compare it to the past S&P 500 performance\",\n    \"Can you identify any correlation between oil prices and stock market trends?\"\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n    useGPT4V?: boolean;\n}\n\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {(useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES).map((question, i) => (\n                <li key={i}>\n                    <Example text={question} value={question} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {\"Clear chat\"}\n            </Button>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { ChoiceGroup, IChoiceGroupOption, Stack, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./VectorSettings.module.css\";\nimport { RetrievalMode, VectorFieldOptions } from \"../../api\";\n\ninterface Props {\n    showImageOptions?: boolean;\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\n    updateVectorFields: (options: VectorFieldOptions[]) => void;\n}\n\nconst vectorFields: IChoiceGroupOption[] = [\n    {\n        key: VectorFieldOptions.Embedding,\n        text: \"Text Embeddings\"\n    },\n    {\n        key: VectorFieldOptions.ImageEmbedding,\n        text: \"Image Embeddings\"\n    },\n    {\n        key: VectorFieldOptions.Both,\n        text: \"Text and Image embeddings\"\n    }\n];\n\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions }: Props) => {\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [vectorFieldOption, setVectorFieldOption] = useState<string>();\n\n    const onVectorFieldsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\n        option && setVectorFieldOption(option.key);\n        let list;\n        if (option?.key === \"both\") {\n            list = [VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding];\n        } else {\n            list = [option?.key as VectorFieldOptions];\n        }\n        updateVectorFields(list);\n    };\n\n    useEffect(() => {\n        showImageOptions\n            ? updateVectorFields([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding])\n            : updateVectorFields([VectorFieldOptions.Embedding]);\n    }, [showImageOptions]);\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\n                <ChoiceGroup\n                    options={vectorFields}\n                    onChange={onVectorFieldsChange}\n                    selectedKey={vectorFieldOption}\n                    defaultSelectedKey={VectorFieldOptions.Both}\n                    label=\"Vector Fields (Multi-query vector search)\"\n                />\n            )}\n        </Stack>\n    );\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport styles from \"./Chat.module.css\";\n\nimport {\n    chatApi,\n    RetrievalMode,\n    ChatAppResponse,\n    ChatAppResponseOrError,\n    ChatAppRequest,\n    ResponseMessage,\n    VectorFieldOptions,\n    GPT4VInput\n} from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\n//import { useMsal } from \"@azure/msal-react\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n\n        try {\n            const request: ChatAppRequest = {\n                prompt: question,\n                session_id: \"1234\" // TODO: Need to generate a session id\n            };\n\n            const response = await chatApi(request);\n            const contentType = response.headers.get(\"content-type\");\n            if (!response.body) {\n                throw Error(\"No response body\");\n            } else if (contentType?.indexOf('text/html') !== -1 || contentType?.indexOf('text/plain') !== -1) {\n                const bodyText = await response.text();\n                console.error(`Chat Error: ${bodyText}`);\n                setError(bodyText);\n            } else {\n                const parsedResponse: ChatAppResponse = await response.json();\n                setAnswers([...answers, [question, parsedResponse]]);\n            }\n            // if (shouldStream) {\n            //     const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, setAnswers, response.body);\n            //     setAnswers([...answers, [question, parsedResponse]]);\n            // } else {\n            //     const parsedResponse: ChatAppResponseOrError = await response.json();\n            //     if (response.status > 299 || !response.ok) {\n            //         throw Error(parsedResponse.error || \"Unknown error\");\n            //     }\n            //     setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\n            // }\n        } catch (e) {\n            console.error(`Chat Error: ${e}`);\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    //useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n    // useEffect(() => {\n    //     getConfig();\n    // }, []);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setShouldStream(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSuggestFollowupQuestions(!!checked);\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        // if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n        //     setActiveAnalysisPanelTab(undefined);\n        // } else {\n            setActiveCitation(citation);\n        //    setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        //}\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                            <h1 className={styles.chatEmptyStateTitle}>Chat with your data</h1>\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {/* {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                isSelected={false}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))} */}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                isSelected={selectedAnswer === index}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => {}} // {() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => {}} // {() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"Type a new question (e.g. what is product FR-R92B-58?)\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                    </div>\n                </div>\n\n                <Panel\n                    headerText=\"Configure answer generation\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n\n                    <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieve this many search results:\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    />\n                    <TextField className={styles.chatSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticRanker}\n                        label=\"Use semantic ranker for retrieval\"\n                        onChange={onUseSemanticRankerChange}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticCaptions}\n                        label=\"Use query-contextual summaries instead of whole documents\"\n                        onChange={onUseSemanticCaptionsChange}\n                        disabled={!useSemanticRanker}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSuggestFollowupQuestions}\n                        label=\"Suggest follow-up questions\"\n                        onChange={onUseSuggestFollowupQuestionsChange}\n                    />\n\n                    <VectorSettings\n                        showImageOptions={useGPT4V && showGPT4VOptions}\n                        updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\n                        updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\n                    />\n\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={shouldStream}\n                        label=\"Stream chat completion responses\"\n                        onChange={onShouldStreamChange}\n                    />\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication, EventType, AccountInfo } from \"@azure/msal-browser\";\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\nvar layout;\n\nlayout = <Layout />;\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: layout,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-ddea70ec.js"}